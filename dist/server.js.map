{"version":3,"sources":["../server.js"],"names":["app","http","require","Server","io","auth","administration","use","static","join","__dirname","ExtractJwt","JwtStrategy","Strategy","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","strategy","jwt_payload","next","console","log","findAccountById","id","then","res","urlencoded","extended","json","initialize","listen","post","req","body","email","password","login","_res","payload","user","token","sign","message","send","error","get","authenticate","session","getUserList","registerUser","on","socket","data","hello"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport path from 'path';\r\nimport authenticate from './lib/userFunctions';\r\nimport bodyParser from 'body-parser';\r\nimport passport from 'passport';\r\nimport passportJWT from 'passport-jwt';\r\nimport jwt from 'jsonwebtoken';\r\nimport admin from './lib/adminFunctions'\r\n\r\nlet app = express();\r\n\r\n// sockets\r\nlet http = require('http').Server(app);\r\nlet io = require('socket.io')(http);\r\n\r\n// Library Objects\r\nlet auth = new authenticate();\r\nlet administration = new admin();\r\n\r\n\r\napp.use('/public', express.static(path.join(__dirname, 'public')));\r\n\r\napp.use(morgan('dev'));\r\napp.use(cors());\r\n\r\n\r\n// Passport Data\r\n\r\nlet ExtractJwt = passportJWT.ExtractJwt;\r\nlet JwtStrategy = passportJWT.Strategy;\r\n\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = 'SomeoneOnceToldMeABetterWayToDoThis';\r\n\r\n/**\r\n * This is the part with passport I'm not sure about.\r\n */\r\nconst strategy = new JwtStrategy(jwtOptions, function (jwt_payload, next) {\r\n    console.log('payload received', jwt_payload);\r\n\r\n    // usually this would be a database call:\r\n    auth.findAccountById(jwt_payload.id).then((res) => {\r\n        if (res) {\r\n            next(null, true);\r\n        } else {\r\n            next(null, false);\r\n        }\r\n    })\r\n});\r\n\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\n\r\napp.use(bodyParser.json());\r\napp.use(passport.initialize());\r\npassport.use(strategy);\r\n\r\n// API Should be listening on 2000 at all times\r\napp.listen(2000);\r\nhttp.listen(2001);\r\n\r\n/**\r\n * app post.\r\n */\r\n\r\napp.post('/login', (req, res) => {\r\n    if (req.body.email && req.body.password) {\r\n\r\n        let email = req.body.email;\r\n        let password = req.body.password;\r\n\r\n        auth.login(email, password).then((_res) => {\r\n            if (_res.payload === 11) {\r\n                let payload = {\r\n                    id: _res.user.id\r\n                };\r\n                let token = jwt.sign(payload, jwtOptions.secretOrKey);\r\n                res.json({message: 'ok', token: token});\r\n            } else {\r\n                res.send({\r\n                    message: 'bad',\r\n                    error: 'Username or Password not found.'\r\n                })\r\n            }\r\n        })\r\n    } else {\r\n        res.send({\r\n            message: 'bad',\r\n            error: 'Username or Password not found.'\r\n        })\r\n    }\r\n});\r\n\r\napp.get('/dashboard', passport.authenticate('jwt', {session: false}), (req, res) => {\r\n    res.send('Success');\r\n});\r\n\r\n// Users\r\napp.get('/userList', passport.authenticate('jwt', {session: false}), (req, res) => {\r\n    administration.getUserList().then((_res) => {\r\n        res.send(_res);\r\n    });\r\n});\r\n\r\napp.post('/registerUser', passport.authenticate('jwt', {session: false}), (req, res) => {\r\n\r\n    let email = req.body.email;\r\n    let password = req.body.password;\r\n\r\n    if (email && password) {\r\n        auth.registerUser(email, password).then((_res) => {\r\n            res.send(_res)\r\n        })\r\n    } else {\r\n        res.send(\"Something went wrong...\")\r\n    }\r\n});\r\n\r\n/**\r\n * Sockets Here.\r\n */\r\nio.on('connection', (socket) => {\r\n\r\n    socket.on('test', (data) => {\r\n        console.log(data.hello)\r\n    })\r\n\r\n});"]}