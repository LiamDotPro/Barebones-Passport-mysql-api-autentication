{"version":3,"sources":["../server.js"],"names":["app","auth","use","static","join","__dirname","ExtractJwt","JwtStrategy","Strategy","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","strategy","jwt_payload","next","console","log","findAccountById","id","then","res","urlencoded","extended","json","initialize","listen","post","req","body","email","password","login","_res","payload","user","token","sign","message","send","error","get","authenticate","session","getAccount","using","connection","query","testDuplicateName","checkForDuplicateAccount","createAccount","registerUser","encryptPassword","loginUser"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport getSqlConnection from './lib/db';\r\nimport Promise from 'bluebird';\r\nimport path from 'path';\r\nimport authenticate from './lib/userFunctions';\r\nimport bodyParser from 'body-parser';\r\nimport passport from 'passport';\r\nimport passportJWT from 'passport-jwt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n\r\nlet app = express();\r\nlet auth = new authenticate();\r\n\r\n\r\napp.use('/public', express.static(path.join(__dirname, 'public')));\r\n\r\napp.use(morgan('dev'));\r\napp.use(cors());\r\n\r\n\r\n// Passport Data\r\n\r\nlet ExtractJwt = passportJWT.ExtractJwt;\r\nlet JwtStrategy = passportJWT.Strategy;\r\n\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = 'SomeoneOnceToldMeABetterWayToDoThis';\r\n\r\n/**\r\n * This is the part with passport I'm not sure about.\r\n */\r\nconst strategy = new JwtStrategy(jwtOptions, function (jwt_payload, next) {\r\n    console.log('payload received', jwt_payload);\r\n\r\n    // usually this would be a database call:\r\n    auth.findAccountById(jwt_payload.id).then((res) => {\r\n        if (res) {\r\n            next(null, true);\r\n        } else {\r\n            next(null, false);\r\n        }\r\n    })\r\n});\r\n\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\n\r\napp.use(bodyParser.json());\r\napp.use(passport.initialize());\r\npassport.use(strategy);\r\n\r\n// API Should be listening on 2000 at all times\r\napp.listen(2000);\r\n\r\n/**\r\n * app post.\r\n */\r\n\r\napp.post('/login', (req, res) => {\r\n    if (req.body.email && req.body.password) {\r\n\r\n        let email = req.body.email;\r\n        let password = req.body.password;\r\n\r\n        auth.login(email, password).then((_res) => {\r\n            if (_res.payload === 11) {\r\n                let payload = {\r\n                    id: _res.user.id\r\n                };\r\n                let token = jwt.sign(payload, jwtOptions.secretOrKey);\r\n                res.json({message: 'ok', token: token});\r\n            } else {\r\n                res.send({\r\n                    message: 'bad',\r\n                    error: 'Username or Password not found.'\r\n                })\r\n            }\r\n        })\r\n    }\r\n});\r\n\r\napp.get('/secret', passport.authenticate('jwt', {session: false}), (req, res) => {\r\n    res.send('Success');\r\n});\r\n\r\n\r\n/**\r\n * test\r\n **/\r\n\r\n// getAccount().then((res) => {\r\n//     console.log(res, ' Successful Test.');\r\n// });\r\n\r\nfunction getAccount() {\r\n    return Promise.using(getSqlConnection(), (connection) => {\r\n        return connection.query('Select * from accounts').then((res) => {\r\n            return res;\r\n        });\r\n    });\r\n}\r\n\r\n// testDuplicateName();\r\n\r\n\r\nfunction testDuplicateName() {\r\n    auth.checkForDuplicateAccount('uno').then((res) => {\r\n        console.log(res);\r\n    });\r\n}\r\n\r\n// createAccount();\r\n\r\nfunction createAccount() {\r\n    auth.registerUser('alonso@gmail.com', '123test').then((res) => {\r\n        console.log(res);\r\n    });\r\n}\r\n\r\n// encryptPassword();\r\n\r\nfunction encryptPassword() {\r\n    auth.encryptPassword('lala').then((res) => {\r\n        console.log(res);\r\n    })\r\n}\r\n\r\n// loginUser();\r\n\r\nfunction loginUser() {\r\n\r\n    auth.login('alonso@gmail.com', '123test').then((res) => {\r\n        console.log(res);\r\n    })\r\n\r\n}"]}