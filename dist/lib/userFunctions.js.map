{"version":3,"sources":["../../lib/userFunctions.js"],"names":["authentication","email","password","checkForDuplicateAccount","then","res","payload","length","encryptPassword","pass","createAccount","msg","validateUser","using","connection","query","_res","comparePasswords","Password","user","id","hash","plainText","compare","catch","e","console","log","saltRounds"],"mappings":"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","file":"userFunctions.js","sourcesContent":["import getSqlConnection from '../lib/db';\r\nimport Promise from 'bluebird';\r\nimport bcrypt from 'bcrypt';\r\n\r\n/**\r\n * Payload Numbering\r\n *\r\n * 0 Success\r\n * 1 Failure\r\n * 10 Account Creation\r\n * 11 Successful Login\r\n */\r\nexport default class authentication {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * List of error handling and checks.\r\n     *\r\n     * Duplicate Entry Test\r\n     * length Test\r\n     * @todo test with postman for if extra length is needed, also implenting special char check regexp\r\n     * @param email\r\n     * @param password\r\n     * @returns {Promise.<TResult>}\r\n     * @constructor\r\n     */\r\n    registerUser(email, password) {\r\n        return this.checkForDuplicateAccount(email).then((res) => {\r\n            if (res.payload === 0) {\r\n                if (password.length >= 6) {\r\n                    return this.encryptPassword(password).then((pass) => {\r\n                        return this.createAccount(email, pass).then(() => {\r\n                            return {\r\n                                msg: 'New Account Created.',\r\n                                payload: res.payload\r\n                            }\r\n                        })\r\n                    });\r\n                } else {\r\n                    return {\r\n                        msg: res.msg\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    msg: res.msg\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Separate method from the attempt to validate specifically so we can add extra\r\n     * checks and further integration later if without worrying about moving stuff\r\n     * to methods.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    login(email, password) {\r\n        return this.validateUser(email, password).then((res) => {\r\n            return res;\r\n        })\r\n    }\r\n\r\n    validateUser(email, password) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('Select id, userName, Password FROM `accounts` Where userName=?', [email]).then((_res) => {\r\n                // Check if we have that account.\r\n                if (_res.length > 0) {\r\n                    return this.comparePasswords(_res[0].Password, password).then((res) => {\r\n                        if (res) {\r\n                            return {\r\n                                msg: 'Success',\r\n                                payload: 11,\r\n                                user: {\r\n                                    id: _res[0].id\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return {\r\n                                msg: 'Fail',\r\n                                payload: 1\r\n                            }\r\n                        }\r\n                    })\r\n                } else {\r\n                    return {\r\n                        msg: 'Fail',\r\n                        payload: 1\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This does a simple bcrypt comparision to identify correctness.\r\n     * @param hash\r\n     * @param plainText\r\n     */\r\n    comparePasswords(hash, plainText) {\r\n        return bcrypt.compare(plainText, hash).then((res) => {\r\n            return res === true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This checks for a duplicate account inside the database.\r\n     * Payload is a boolean Int\r\n     */\r\n    checkForDuplicateAccount(email) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('SELECT `userName` FROM `accounts` WHERE userName=?', [email]).then((res) => {\r\n                if (res.length === 0) {\r\n                    return {\r\n                        msg: 'Success',\r\n                        payload: 0\r\n                    }\r\n                } else {\r\n                    return {\r\n                        msg: 'Fail - Duplicate Account',\r\n                        payload: 1\r\n                    }\r\n                }\r\n            }).catch((e) => {\r\n                console.log(e);\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find Account by Id\r\n     */\r\n    findAccountById(id) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('SELECT `id` FROM `accounts` WHERE id=?', [id]).then((res) => {\r\n                if (res.length > 0) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This is the last part of the system.\r\n     * All passwords should be ran through bcrypt before being inserted.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    createAccount(email, password) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('INSERT INTO `accounts` (userName, Password) VALUES (?, ?)', [email, password]).then((res) => {\r\n                return {msg: 'Success', payload: 10}\r\n            })\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Encrypts plain text passwords using a safe encryption method.\r\n     * @param password\r\n     */\r\n    encryptPassword(password) {\r\n        const saltRounds = 10;\r\n\r\n        return bcrypt.hash(password, saltRounds).then(function (hash) {\r\n            return hash;\r\n        });\r\n    }\r\n}"]}